parameters:
    csbill_invoice.menu.class: CSBill\InvoiceBundle\Menu\Main
    csbill_invoice.manager.class: CSBill\InvoiceBundle\Manager\InvoiceManager
    invoice.mailer.send_invoice.payments.class: CSBill\InvoiceBundle\Listener\Mailer\InvoiceMailerListener

services:
    csbill_invoice.menu:
        class: %csbill_invoice.menu.class%
        tags:
            - { name: cs_core.menu, menu: top, method: topMenu }
            - { name: cs_core.menu, menu: invoices_index,  method: invoicesMenu }
            - { name: cs_core.menu, menu: invoices_view,   method: invoicesMenu }
            - { name: cs_core.menu, menu: invoices_create, method: invoicesMenu }
            - { name: cs_core.menu, menu: invoices_edit, method: invoicesMenu }

    invoice.manager:
        class: %csbill_invoice.manager.class%
        arguments: [@doctrine, @event_dispatcher]
        calls:
            - [ setContainer, [@service_container]]

    invoice.mailer.send_invoice.payments:
        class: %invoice.mailer.send_invoice.payments.class%
        arguments: [@csbill_payment.method.manager, @templating]
        tags:
            - { name: kernel.event_listener, event: billing.mailer.send_invoice, method: onInvoiceMail }

    invoice.user.listener:
        class: CSBill\InvoiceBundle\Listener\Doctrine\InvoiceUsersListener
        tags:
            - { name: doctrine.event_listener, event: postLoad }

    invoice.form.type:
        class: CSBill\InvoiceBundle\Form\Type\InvoiceType
        arguments: [@=service('doctrine').getManager().getRepository('CSBillCoreBundle:Tax')]
        tags:
            - { name: form.type, alias: invoice }

    invoice.item.form.type:
        class: CSBill\InvoiceBundle\Form\Type\ItemType
        arguments: [@=service('doctrine').getManager().getRepository('CSBillCoreBundle:Tax')]
        tags:
            - { name: form.type, alias: invoice_item }